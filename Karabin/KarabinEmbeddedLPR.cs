// Generated by .NET Reflector from e:\IT Management\1397\Projects\تردد کامیون\Karabin (002)\KarabinEmbeddedLPRLibrary\Karabin.Embedded.LPR.Library.dll
namespace KarabinEmbeddedLPRLibrary
{
    using System;
    using System.Drawing;
    using System.IO;
    using System.Net;
    using System.Runtime.CompilerServices;
    using System.Text;
    using System.Threading;
    
    public class KarabinEmbeddedLPR
    {
        private KarabinEmbeddedLPRLibrary.NedapListener NedapListener = new KarabinEmbeddedLPRLibrary.NedapListener();
        private bool connected;
        private string ip;
        private string username;
        private string password;
        private CarReceivedEvent _OnCarReceived;
        private static int _bufferSize = 0x400;
        
        public event CarReceivedEvent OnCarReceived
        {
            add
            {
                CarReceivedEvent onCarReceived = this._OnCarReceived;
                while (true)
                {
                    CarReceivedEvent a = onCarReceived;
                    CarReceivedEvent event4 = (CarReceivedEvent) Delegate.Combine(a, value);
                    onCarReceived = Interlocked.CompareExchange<CarReceivedEvent>(ref this._OnCarReceived, event4, a);
                    if (ReferenceEquals(onCarReceived, a))
                    {
                        return;
                    }
                }
            }
            remove
            {
                CarReceivedEvent onCarReceived = this._OnCarReceived;
                while (true)
                {
                    CarReceivedEvent source = onCarReceived;
                    CarReceivedEvent event4 = (CarReceivedEvent) Delegate.Remove(source, value);
                    onCarReceived = Interlocked.CompareExchange<CarReceivedEvent>(ref this._OnCarReceived, event4, source);
                    if (ReferenceEquals(onCarReceived, source))
                    {
                        return;
                    }
                }
            }
        }
        
        public KarabinEmbeddedLPR()
        {
            this.NedapListener.OnPlateReceived += new KarabinEmbeddedLPRLibrary.NedapListener.PlateReceivedEvent(this.NedapListener_OnPlateReceived);
        }
        
        private static string Base64Encode(string plainText)
        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(plainText));
        }
        
        private Bitmap ByteToImage(byte[] blob)
        {
            Bitmap bitmap2;
            MemoryStream stream = new MemoryStream();
            try
            {
                stream.Write(blob, 0, blob.Length);
                stream.Seek(0L, SeekOrigin.Begin);
                bitmap2 = new Bitmap(stream);
            }
            finally
            {
                if (!ReferenceEquals(stream, null))
                {
                    stream.Dispose();
                }
            }
            return bitmap2;
        }
        
        public bool Connect(string ip, string username, string password, int port)
        {
            bool flag;
            int num1;
            if (((ip.Length == 0) || (username.Length == 0)) || (password.Length == 0))
            {
                num1 = 0;
            }
            else
            {
                num1 = Convert.ToInt32(port != 0);
            }
            if (num1 == 0)
            {
                flag = false;
            }
            else
            {
                if (this.connected)
                {
                    this.Disconnect();
                }
                this.ip = ip;
                this.username = username;
                this.password = password;
                this.NedapListener.Start(port);
                this.connected = true;
                flag = true;
            }
            return flag;
        }
        
        private static void CopyStream(Stream src, Stream dest)
        {
            int num;
            byte[] buffer = new byte[_bufferSize];
            while ((num = src.Read(buffer, 0, buffer.Length)) > 0)
            {
                dest.Write(buffer, 0, num);
            }
        }
        
        public void Disconnect()
        {
            this.connected = false;
            this.NedapListener.Stop();
        }
        
        private static MemoryStream HttpGet(string URI, string proxy, string user, string pass)
        {
            WebRequest request = WebRequest.Create(URI);
            request.Proxy = new WebProxy(proxy, true);
            request.Headers.Add("Authorization", "Basic " + Base64Encode(user + ":" + pass));
            MemoryStream dest = new MemoryStream();
            try
            {
                HttpWebResponse response = null;
                HttpWebResponse objA = response = request.GetResponse() as HttpWebResponse;
                try
                {
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        CopyStream(response.GetResponseStream(), dest);
                    }
                }
                finally
                {
                    if (!ReferenceEquals(objA, null))
                    {
                        objA.Dispose();
                    }
                }
            }
            catch (Exception)
            {
            }
            return dest;
        }
        
        private void NedapListener_OnPlateReceived(object sender, KarabinEmbeddedLPRLibrary.NedapListener.PlateReceivedEventArgs e)
        {
            int num1;
            string plate = this.parsePlate(e.GetPlate());
            string str2 = this.parsePath(e.GetPath());
            if (((plate.Length <= 0) || (str2 == null)) || (str2.Length <= 0))
            {
                num1 = 1;
            }
            else
            {
                num1 = Convert.ToInt32("NON".Equals(str2));
            }
            if (num1 == 0)
            {
                string[] strArray = new string[] { "http://", this.ip, "/Karabin/rest/api/get?id=", str2, "&type=C" };
                MemoryStream stream = HttpGet(string.Concat(strArray), this.ip, this.username, this.password);
                Bitmap carImage = null;
                if (stream.Length > 0L)
                {
                    carImage = this.ByteToImage(stream.ToArray());
                }
                MemoryStream stream2 = HttpGet("http://" + this.ip + "/Karabin/rest/api/get?id=" + str2 + "&type=P", this.ip, this.username, this.password);
                Bitmap plateImage = null;
                if (stream2.Length > 0L)
                {
                    plateImage = this.ByteToImage(stream2.ToArray());
                }
                this._OnCarReceived(this, new CarReceivedEventArgs(plate, carImage, plateImage));
            }
        }
        
        private string parsePath(byte[] totalResult)
        {
            string str = "";
            if (totalResult == null)
            {
                Console.WriteLine("");
            }
            else
            {
                int index = 0;
                while (true)
                {
                    bool flag = index < totalResult.Length;
                    if (!flag || (totalResult[index] == 0))
                    {
                        break;
                    }
                    str = str + Convert.ToChar(totalResult[index]);
                    index++;
                }
            }
            return str;
        }
        
        private string parsePlate(byte[] totalResult)
        {
            var strArray = new string[18] { "الف", "ب", "س", "د", "ع", "ق", "ه", "ج", "ل","م","ن" ,"ص","ط","و","ت","ی","ژ","پ"};

            var charlettersIndex = strArray;
            strArray = new string[18] { "A", "B", "C", "D", "E", "G", "H", "J", "L","M","N","S","T","V","X","Y","Z","P" };

            var charlettersIndexNedap = strArray;

            int num1;
            string str = "";
            if ((totalResult == null) || (totalResult[0] != 2))
            {
                num1 = 1;
            }
            else
            {
                num1 = Convert.ToInt32(totalResult[12] != 3);
            }
            if (num1 == 0)
            {
                str = str + Convert.ToChar(totalResult[2]) + Convert.ToChar(totalResult[3]);
                int index = Array.IndexOf<string>(charlettersIndexNedap, char.ToString(Convert.ToChar(totalResult[4])));
                if (index != -1)
                {
                    str = str + charlettersIndex[index];
                }
                str = ((str + Convert.ToChar(totalResult[5]) + Convert.ToChar(totalResult[6])) + Convert.ToChar(totalResult[7]) + Convert.ToChar(totalResult[8])) + Convert.ToChar(totalResult[9]) + Convert.ToChar(totalResult[10]);
            }
            return str;
        }
        
        public bool Connected
        {
            get
            {
                return this.connected;
            }
        }
        
        public delegate void CarReceivedEvent(object source, KarabinEmbeddedLPR.CarReceivedEventArgs e);
        
        public class CarReceivedEventArgs : EventArgs
        {
            private string Plate;
            private Bitmap CarImage;
            private Bitmap PlateImage;
            
            public CarReceivedEventArgs(string plate, Bitmap carImage, Bitmap plateImage)
            {
                this.Plate = plate;
                this.CarImage = carImage;
                this.PlateImage = plateImage;
            }
            
            public Bitmap GetCarImage()
            {
                return this.CarImage;
            }
            
            public string GetPlate()
            {
                return this.Plate;
            }
            
            public Bitmap GetPlateImage()
            {
                return this.PlateImage;
            }
        }
    }
}
